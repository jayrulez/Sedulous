using System;
namespace SDL2Native
{
    public abstract class SDL2NativeImpl
    {
		public abstract void SDL_GetVersion(SDL_version* version);
        public abstract char8* SDL_GetError();
        public abstract void SDL_ClearError();
        public abstract int32 SDL_Init(SDL_Init_Flags flags);
        public abstract void SDL_Quit();
        public abstract void SDL_PumpEvents();
        public abstract int32 SDL_PollEvent(out SDL_Event event);
        public abstract void SDL_SetEventFilter(SDL_EventFilter filter, void* userdata);
        public abstract SDL_Window* SDL_CreateWindow(char8* title, int32 x, int32 y, int32 w, int32 h, SDL_WindowFlags flags);
        public abstract SDL_Window* SDL_CreateWindowFrom(void* data);
        public abstract void SDL_DestroyWindow(SDL_Window* window);
        public abstract uint32 SDL_GetWindowID(SDL_Window* window);
        public abstract char8* SDL_GetWindowTitle(SDL_Window* window);
        public abstract void SDL_SetWindowTitle(SDL_Window* window, char8* title);
        public abstract void SDL_SetWindowIcon(SDL_Window* window, SDL_Surface* icon);
        public abstract void SDL_GetWindowPosition(SDL_Window* window, out int32 x, out int32 y);
        public abstract void SDL_SetWindowPosition(SDL_Window* window, int32 x, int32 y);
        public abstract void SDL_GetWindowSize(SDL_Window* window, out int32 w, out int32 h);
        public abstract void SDL_SetWindowSize(SDL_Window* window, int32 w, int32 h);
        public abstract void SDL_GetWindowMinimumSize(SDL_Window* window, out int32 w, out int32 h);
        public abstract void SDL_SetWindowMinimumSize(SDL_Window* window, int32 w, int32 h);
        public abstract void SDL_GetWindowMaximumSize(SDL_Window* window, out int32 w, out int32 h);
        public abstract void SDL_SetWindowMaximumSize(SDL_Window* window, int32 w, int32 h);
        public abstract bool SDL_GetWindowGrab(SDL_Window* window);
        public abstract void SDL_SetWindowGrab(SDL_Window* window, bool grabbed);
        public abstract int32 SDL_SetWindowBordered(SDL_Window* window, bool bordered);
        public abstract int32 SDL_SetWindowFullscreen(SDL_Window* window, uint32 flags);
        public abstract int32 SDL_SetWindowDisplayMode(SDL_Window* window, SDL_DisplayMode* mode);
        public abstract int32 SDL_GetWindowDisplayMode(SDL_Window* window, SDL_DisplayMode* mode);
        public abstract int32 SDL_GetWindowDisplayIndex(SDL_Window* window);
        public abstract SDL_WindowFlags SDL_GetWindowFlags(SDL_Window* window);
        public abstract void SDL_ShowWindow(SDL_Window* window);
        public abstract void SDL_HideWindow(SDL_Window* window);
        public abstract void SDL_MaximizeWindow(SDL_Window* window);
        public abstract void SDL_MinimizeWindow(SDL_Window* window);
        public abstract void SDL_RestoreWindow(SDL_Window* window);
        public abstract bool SDL_GetWindowWMInfo(SDL_Window* window, SDL_SysWMinfo* info);
        public abstract SDL_RWops * SDL_RWFromFile(char8* file, char8* mode);
        public abstract SDL_RWops * SDL_RWFromMem(void* mem, int32 size);
        public abstract SDL_RWops * SDL_AllocRW();
        public abstract void SDL_FreeRW(SDL_RWops * area);
        public abstract SDL_Surface* SDL_LoadBMP_RW(SDL_RWops * src, int32 freesrc);
        public abstract int32 SDL_SaveBMP_RW(SDL_Surface* surface, SDL_RWops * dst, int32 freedst);
        public abstract uint32 SDL_GetMouseState(out int32 x, out int32 y);
        public abstract uint8* SDL_GetKeyboardState(out int32 numkeys);
        public abstract SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode keycode);
        public abstract SDL_Keymod SDL_GetModState();
        public abstract bool SDL_SetHint(char8* name, char8* value);
        public abstract SDL_Surface* SDL_CreateRGBSurface(uint32 flags, int32 width, int32 height, int32 depth, uint32 Rmask, uint32 Gmask, uint32 Bmask, uint32 AMask);
        public abstract void SDL_FreeSurface(SDL_Surface* surface);
        public abstract int32 SDL_LockSurface(SDL_Surface* surface);
        public abstract void SDL_UnlockSurface(SDL_Surface* surface);
        public abstract int32 SDL_BlitSurface(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);
        public abstract int32 SDL_BlitScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);
        public abstract int32 SDL_SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode);
        public abstract int32 SDL_GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode);
        public abstract int32 SDL_FillRect(SDL_Surface* surface, SDL_Rect* rect, uint32 color);
        public abstract int32 SDL_FillRects(SDL_Surface* dst, SDL_Rect* rects, int32 count, uint32 colors);
        public abstract SDL_Cursor* SDL_CreateColorCursor(SDL_Surface* surface, int32 hot_x, int32 hot_y);
        public abstract void SDL_FreeCursor(SDL_Cursor* cursor);
        public abstract int32 SDL_ShowCursor(int32 toggle);
        public abstract SDL_Cursor* SDL_GetCursor();
        public abstract void SDL_SetCursor(SDL_Cursor* cursor);
        public abstract SDL_Cursor* SDL_GetDefaultCursor();
        public abstract int32 SDL_GetNumVideoDisplays();
        public abstract char8* SDL_GetDisplayName(int32 displayIndex);
        public abstract int32 SDL_GetDisplayBounds(int32 displayIndex, SDL_Rect* rect);
        public abstract int32 SDL_GetNumDisplayModes(int32 displayIndex);
        public abstract int32 SDL_GetDisplayMode(int32 displayIndex, int32 modeIndex, SDL_DisplayMode* mode);
        public abstract int32 SDL_GetCurrentDisplayMode(int32 displayIndex, SDL_DisplayMode* mode);
        public abstract int32 SDL_GetDesktopDisplayMode(int32 displayIndex, SDL_DisplayMode* mode);
        public abstract SDL_DisplayMode* SDL_GetClosestDisplayMode(int32 displayIndex, SDL_DisplayMode* mode, SDL_DisplayMode* closest);
        public abstract bool SDL_PixelFormatEnumToMasks(uint32 format, int32* bpp, uint32* Rmask, uint32* Gmask, uint32* Bmask, uint32* Amask);
        public abstract void* SDL_GL_GetProcAddress(char8* proc);
        public abstract SDL_GLContext* SDL_GL_CreateContext(SDL_Window* window);
        public abstract void SDL_GL_DeleteContext(SDL_GLContext* context);
        public abstract SDL_GLContext* SDL_GL_GetCurrentContext(/*IntPtr context*/);
        public abstract int32 SDL_GL_MakeCurrent(SDL_Window* window, SDL_GLContext* context);
        public abstract int32 SDL_GL_SetAttribute(SDL_GLattr attr, int32 value);
        public abstract int32 SDL_GL_GetAttribute(SDL_GLattr attr, int32* value);
        public abstract void SDL_GL_SwapWindow(SDL_Window* window);
        public abstract int32 SDL_GL_SetSwapInterval(int32 interval);
        public abstract void SDL_GL_GetDrawableSize(SDL_Window* window, out int32 w, out int32 h);
        public abstract int32 SDL_NumJoysticks();
        public abstract bool SDL_IsGameController(int32 joystick_index);
        public abstract SDL_GameController* SDL_GameControllerOpen(int32 index);
        public abstract void SDL_GameControllerClose(SDL_GameController* gamecontroller);
        public abstract char8* SDL_GameControllerNameForIndex(int32 joystick_index);
        public abstract bool SDL_GameControllerGetButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);
        public abstract SDL_Joystick* SDL_GameControllerGetJoystick(SDL_GameController* gamecontroller);
        public abstract int32 SDL_JoystickInstanceID(SDL_Joystick* joystick);
        public abstract int32 SDL_GetNumTouchDevices();
        public abstract int64 SDL_GetTouchDevice(int32 index);
        public abstract int32 SDL_GetNumTouchFingers(int64 touchID);
        public abstract SDL_Finger* SDL_GetTouchFinger(int64 touchID, int32 index);
        public abstract int32 SDL_RecordGesture(int64 touchID);
        public abstract int32 SDL_SaveAllDollarTemplates(SDL_RWops* dst);
        public abstract int32 SDL_SaveDollarTemplate(int64 gestureID, SDL_RWops* dst);
        public abstract int32 SDL_LoadDollarTemplates(int64 touchID, SDL_RWops* src);
        public abstract void SDL_StartTextInput();
        public abstract void SDL_StopTextInput();
        public abstract void SDL_SetTextInputRect(SDL_Rect* rect);
        public abstract bool SDL_HasClipboardText();
        public abstract char8* SDL_GetClipboardText();
        public abstract void SDL_SetClipboardText(char8* text);
        public abstract SDL_PowerState SDL_GetPowerInfo(int32* secs, int32* pct);
        public abstract int32 SDL_ShowSimpleMessageBox(uint32 flags, char8* title, char8* message, SDL_Window* window);
        public abstract int32 SDL_SetWindowOpacity(SDL_Window* window, float opacity);
        public abstract int32 SDL_GetWindowOpacity(SDL_Window* window, float* opacity);
        public abstract int32 SDL_GameControllerAddMapping(char8* mappingString);
        public abstract int32 SDL_GameControllerAddMappingsFromRW(SDL_RWops* rw, int32 freerw);
        public abstract char8* SDL_GameControllerMapping(SDL_GameController* gamecontroller);
        public abstract char8* SDL_GameControllerMappingForGUID(Guid guid);
        public abstract Guid SDL_JoystickGetGUID(SDL_Joystick *joystick);
        public abstract int32 SDL_GetDisplayDPI(int32 displayIndex, float* ddpi, float* hdpi, float* vdpi);
        public abstract void SDL_free(void* mem);
        public abstract bool SDL_GetRelativeMouseMode();
        public abstract int32 SDL_SetRelativeMouseMode(bool enabled);
        public abstract void SDL_WarpMouseInWindow(SDL_Window* window, int32 x, int32 y);
    }

}
